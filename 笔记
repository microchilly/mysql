## 3.表的基本操作

### 1.提出问题，引入表的思维

1，数据库里面的东西：**表**，每一个表代表一类东西

2，本节课的主要目的：操作表

3，**数据就存在在表中**！

4，接下来的操作：==创建表，修改表中的数据，添加表中的数据，删除表的数据==

### 2.引入数据库和查看数据库中的表

```mysql
use schools;
# 使用该数据库
show tables;
# 显示仓库中所有的表
```

### 3.创建表

```mysql
creat table student(# 加上括号，再回车，以免一行输入过多信息
    id int,# 数据库第一个内容是id，类型为int整型
    name varchar(30)# 第二个内容是名字，类型为30个字符
    age int# 第三个内容是id，类型为int整型
    );
# 创建一个表
```

```mysql
show tables;
# 显示在当前数据库中所有的表
```

### 4.创建表（B格，非常重要）

```mysql
create table if not exists teacher(
    id int auto_increment primary key comment '主键id',
    name varchar(30) not null comment '老师名字',
    phone varchar(20) comment '电话号码',
    address varchar(100) default '暂时未知' comment '住址'
    )engine=innodb;
```

表中的id, name, age 都是字段，每一个学生都会有这些东西
auto_increment 自动增长，代表id 会==**按照int类型 自动增长**== 

括号内的数字(30) 宽度，不是容量，能超过这个宽度，超过会这么样，自己去研究！

primary key 主键，是最主要的，靠id==**这个字段区分学生这张表**==，是唯一的

comment 注释，标准写法

not null 不能为空

default '默认值'    如果未填数据，设置该值为默认值

engine=innodb 代表数据引擎，mysql用的最多的是innodb

```mysql
show create table teacher;
# 显示teacher这个表的创建过程
```

### 4.查看表结构

```mysql
desc teacher;
# 把表所有的结构列举出来
# Field 字段
# Type 类型
# Null 能否为空
# Key 主键
# Default 默认值，没有的时候就是这个默认值
# Extra 规则，是否自动增长是一个规则
```

### 6.删除表

```mysql
drop table stu;
# 删除表stu
drop table if exists stu;
# 判断是否存在时，再删除stu这张表，如果表不存在，不会报错，只会警告！
drop table if exists stu，oooo;
# 删除stu和oooo两张表
```

### 7.修改表

```mysql
alter table student add phone varchar(20);
# 为学生表添加一个字段phone
alter table student add gender varchar(1) after name;
# 为学生表添加一个字段gender，放在name的前面
alter table student add gender varchar(1) first;
# 为学生表添加一个字段gender，放在表的最前面
alter table student add address varchar(100) first;
# # 为学生表添加一个字段address，放在表的最前面
```

```mysql
alter table student drop address;
# 删除student这张表的字段address 
```

```mysql
alter table student change phone tel_phone int(11);
# change修改表student中的字段phone为tel_phone int(11)
# 既可以改名字，又可以改类型
```

```mysql
alter table student modify tel_phone varchar(30);
# modify直接修改表中的类型，而不修改名字
# 只改类型，不该名字
```

 ```mysql
 alter table student rename to students;
 # 把student这个表的名字重命名为students
 # 但是，注意，在实际操作中，复数绝对不能出现表ming
 ```

### 8.总结

```mysql
use school;
# 使用数据库，中间无需添加database 
# 关键字：use

show tables;
# 显示当前数据库中所有的表
# 关键字：show

create table (if not exists) teacher(
    id int (auto_increment) (primary key) (comment '主键id'),
    name varchar(30) not null comment '教师姓名',
    address varchar(100) default '暂时未知' comment '家庭地址'
    )engine=innodb;
# 创建表
# 关键字：create,auto_increment,primary key,comment,varchar,not null,engine=innodb

show create table teacher;
# 查看创建表的过程
# 关键字：show

desc teacher;
# 查看表的结构，中间无需添加table 
# 关键字：desc

drop table (if exists) stu;
# 删除表，可一次性删除多个
# 关键字：drop

alter table student add phone varchar(20);
# 为表中添加一个字段
alter table student add gender varchar(1) after name;
# 为表中添加一个字段，放在name的前面
alter table student add gender varchar(1) first;
# 为表中添加一个字段，放在表的最前面
# 关键字：alter,add,first,after

alter table student drop address;
# 删除表的字段
# 关键字：alter,drop

alter table student change phone tel_phone int(11);
# 修改表中的字段的名字和类型
# 关键字：alter,change 

alter table student modify tel_phone varchar(30);
# 修改表中的字段的类型，不修改名字
# 关键字：alter,modify

alter table student rename to students;
# 修改表的名字
# 关键字：alter,rename to

```


## 4.数据操作

### 1.插入数据

1，学习如何将数据放入表中，添加数据

```mysql
insert into teacher(id,name,phone,address) values(1,'Frank','188888888','ShanHai');
# 向teacher表中插入数据
# 数据与teacher后括号对应的顺序不能颠倒，是一一对应的
insert into teacher(phone,address,id,name) values('189999999','Beijing',2,'Jeff');
# 数据与teacher后括号对应的顺序不能颠倒，是一一对应的
insert into teacher values(3,'Tom','1000000000','Nanjing'); 
# 如果不写(phone,address,id,name)，那数据对应的顺序必须和表中字标的顺序一样

insert into teacher values(NULL,'Tom','1000000000',default); 
# 对于auto_increment自动增长数据和default默认数据
# 该字段对应NULL时，auto_increment对于的数据会自动增长
# 该字段对应default时,default对应的数据会是默认数据
# 该字段对应not null时，必须要为该字段添加数据

insert into teacher(name,phone,address) values('chilly','187777777','HongKong');
# 可以省去可非空数据和自动增长数据（它自动会帮你添加）
# 只要数据和teacher后括号的字段一一对应即可！
```

2，查询表里的全部数据

```mysql
select * from teacher;
# 查询teacher表中的全部数据
# 但是不推荐这样用！
# 效率不是特别高
```

### 2.一次性插入多条数据

```mysql
 insert into teacher values(NULL,'TOM_1',NULL,default),(NULL,'Jerry_1',NULL,default);
 # 一次性插入多条数据，用逗号对数据进行分隔
```

### 3.删除数据

```mysql
delete from teacher where id=9;
# 删除id为9的数据
delete from teacher where name="Tom";
# 删除名字为Tom的数据
# 会直接把叫做Tom的数据全部删除
# 所以一般根据唯一的数据进行删除
delete from teacher where age>30;
# 删除年龄大于30的数据
delete from teacher;
# 删除teacher表中的所有数据
# 但不建议这么写，比较慢
# 删库比别人慢，你拿什么跑路！
```

### 4.清空表

```mysql
truncate table student;
# 清空表student中的所有数据！
```

### 5.小细节

```mysql
# truncate table student; 和 delete from teacher;的区别
delete from teacher;
# 删除teacher表中的所有数据
# 速度慢，且自增的数据不会回归原位
truncate table student;
# 清空teacher表中的所有数据（删库跑路必备）
# 速度快，且自增的数据会回归原位
```

### 6.更新数据

```mysql
update teacher set name='frank' where id = 1;
# set 重新设定，树立，更新数据
# 设置id = 1的数据对应的名字，更新为'frank'
# 如果查找的字段是重复的，拿对应的数据会同时全部被修改！
# 所以，注意where后面的东西
update teacher set name='tom',address = 'shenzhen' where id = 2;
# 同时更新一个数据的两个字段，中间用逗号隔开
```

```mysql
update teacher set name='tom',address = 'shenzhen';
# 如果后面没有where，那么表中的数据全部被修改
# where一定要有，尽可能唯一，除非有其他目的
```

SQL注入攻击：将sql中的数据全部进行修改！

```mysql
update teacher set address='shanghai' where phone='1111111' or phone='2222'
# 可以根据多个条件修改数据
# 满足phone='1111111'或者phone='2222'的数据的address全部修改为shanghai 
```

### 7.查询表数据（基本）

```mysql
select phone,address from teacher;
# 只查询teacher表中的phone和address字段的数据
select * from teacher;
# 查询全部的数据
```

至此，表基础的操作，基本上已经算完成了！
后面还有更难的！

### 8.SQL语句区分

1，做一个有意思的**总结**
数据库 ->表 ->数据的增删改查

2，==**DDL**==：data definition language 数据库定义语言（对数据库而言）
create alter drop show

3，==**DML**==：data manipulation language 数据操纵语言（对数据而言）
select update delate insert 

4，==**DCL**==：data control language 数据库控制语言（对开发者权限而言）

### 9.表结束语

1，表的操作基本完成，但想要去公司实习还需要后学！

2，这是日积月累的过程，把基础打好，剩下的进入企业，就会明白是怎么回事！

### 10.字符集编码问题

1，windows使用在字符集编码是GBK时，mysql客户端使用的也是GBK
而实际开发过程中一定不能使用GBK，而使用UTF-8

```mysql
show variables like 'character_set_%';
# 显示mysql使用的所有的字符集编码
# character_set_client 客户端的字符集编码
# character_set_results 返回的字符集编码

# 而实际使用的字符集编码是UTF-8，国际标准
# 但是在WIndows想要使用中文，只能采用字符集编码为GBK

set character_set_client = gbk;
# 修改character_set_client的字符集编码
```

11.总结

```mysql
insert into teacher(id,name,phone,address) values(1,'Frank','188888888','ShanHai');
# 插入数据
# 表后面括号的字段未省去，按照其顺序填写字段对应的数据
# 表后面括号的字段省去，按照表中字段的数据进行填写
# auto_increment：填写NULL，数据自动增长
# default：填写default，数据自动设置为默认值
insert into teacher values(NULL,'TOM_1',NULL,default),(NULL,'Jerry_1',NULL,default);
# 一次性插入多条数据，用逗号对数据进行分隔
# 关键词：insert into,values

delete from teacher where id=9;
# 删除数据
# 后面没有where则删除表中的全部数据，但自增数据不会回归起始点
truncate table student;
# 清空表中数据
# 注意table不能省去
# 关键词：delate,truncate 

update teacher set name='frank' where id = 1;
# 更新数据
# 后面没有where则修改表中的全部数据
update teacher set name='tom',address = 'shenzhen' where id = 2;
# 同时更新一个数据的两个字段，中间用逗号隔开
update teacher set address='shanghai' where phone='1111111' or phone='2222'
# 可以根据多个条件修改数据
# 关键词：update,set，or

select * from teacher 
# 查询表中的全部数据
select phone,address from teacher;
# 只查询表中一些字段的数据

show variables like 'character_set_%';
# 显示mysql使用的所有的字符集编码
set character_set_client = gbk;
# 修改character_set_client的字符集编码
```


## 5.数据类型

### 1.数据库的数据类型问题


## 0.开场吹比

### 0-0.什么是数据库

**数据库**：数据保存的仓库，保存海量数据

### 1-1.抛出问题，数据库的诞生

1，放在内存里面的数据，第二次运行时，上次的数据消失  --- **瞬时状态**

2，将数据永久的保留在文件里 --- **持久状态（数据库的起源）**

### 1-2.萌芽阶段

1，数据写在文件里面，那**修改，删除，更新和加密**是非常费劲的一件事，对于实际开发不符合要求！

2，后人需要解决这些问题！

### 1-3.CRUD

1，四个最基本要求：**CRUD**
新增数据 --- 增 C(Create)
查找数据 --- 查 R(Read) （最难）
修改数据 --- 改 U(Update)
删除数据 --- 删D(Delete)

### 2-1.吹比：层次模型（第一代数据库）

1，类似于树状结构

2，查找效率较低，数据不完整性（可能出现重复的数据）

### 2-2.吹比：网状模型（第一代数据库）

1，类似于图形结构

2，模型结构复杂，不利于数据库的维护和重建

### 2-3.吹比：关系型

1，通过一个共有的字段（标识符）来确定数据的对应关系：
建立不同类型的表，一个表中的数据都有一个唯一的标识符
两个表中相同的标识符对应的两个数据有对应关系

2，每个表各管各的，相互独立，每个表中的数据有一个公共的字符段
还有一个子表。

### 3.学习选什么数据库呢

1，掌握权在企业手上，选择最基础的，选最通用的！

2，大部分用mysql，先学好这个！
## 1.安装连接以及配置

### 1.两种安装方式，入门推荐第二种

1，选型数据库，选择和公司差不多的，选择和上一个业务相关的版本

2，如果没有关联，选择最新的稳定版，不能选开发版

3，选择5.7.29的版本

4，在终端中进入mysql：==**mysql -u root -p**==
退出mysql:  ==**exit**==   ==**\q**==
显示数据库：==**show databases;**==

### 2.更改终端

使用软件Hyper，作为终端

**cls：清屏**

### 3.服务的启动和停止

1，关闭MySQL57的服务后，就无法连接mysql的服务器

2，

**client 客户端**，通过命令去访问/操作数据库（我们通过终端来进行访问服务端）

**server 服务端** (Mysql Server)  典型的C/S架构软件

### 4.连接mysql

1，mysql（关系型数据库的代表）： SQL语句
sql server ：T-sql语句

但是基础的内容还是一样的，顶多多了一些特性

```shell
mysql - u(指定用户名) root(最高权限用户) -p(输入密码)
```

**以用户名和密码的形式登录mysql**

### 5.创建data文件夹

1，mysql内部的文件信息

**bin**文件夹：二进制文件，储存着mysql的命令
**include**文件夹：包含一些头文件
**lib**文件夹：引入的一些库，一些依赖
**share**文件夹：支持的一些字符编码，例如UTF-8编码

2，创建data文件夹

```shell
mysqld --initialize-insecure --user=root 
```

库和路径就配置好了！


### 1.数据库显示与讲解

```mysql
net stop mysql57
# 关闭mysql57服务
net start mysql57
# 开启mysql57服务
```

1，注意命令行语句无需加；

而mysql后面的语句需要加;

```mysql
show databases;
# 显示所有的数据库，每一行都是一个仓库
```

information_schema：存储服务器管理数据的消息
mysql：提供用户的消息
performance_schema：存储服务器性能的消息
sys：系统文件

### 2.创建数据库

```mysql
create database student;
# 创建一个库
# 数据库的名字不能是关键字
create database `database`;
# 但是还是可以用反引号强制使用，但最好不用
```

```mysql
# 注意不能创建已经存在的库
# 可以在创建库的时候检查该库是否创建
# 若之前已经创建，则不创建；之前未创建，则创建
creat database if not exists student;
# 或者
creat database if not exists `student` ;
```

1，字符编码若出现问题，则产生的数据会出现**乱码**

### 3.删除数据库

```mysql
drop database student;
# 删除数据库
# 若删除的库不存在，则报错
drop database if exists student;
# 检查要删除的库是否存在，再进行删除
```

### 4.查看创建数据库的SQL 

```mysql
# 看一下最近是如何创建的库
show create database student;
# 查看该库是怎么创建的，以及创建用的字符编码
```

### 5.创建数据库指定字符编码以及查看数据库的字符编码

乱码 -> 字符编码

 use students;# 使用该数据库show tables;# 显示仓库中所有的表mysql

```mysql
create database if not exists student charset=gbk;
# 创建库，并且其字符编码为gbk
```

1，实际开发一般使用utf-8字符编码
但由于windows的cmd是gbk字符编码，所以学习的时候使用gbk

### 6.修改数据库字符编码

```mysql
alter database teacher charset=gbk;
# 更新字符串编码为gbk
```

### 7，数据库操作的结束语

最简单的操作已经结束！

### 8.总结

```mysql
show databases;
# 展示所有的数据库
# 关键字：show

create database (if not exists) schools (charset=gbk);
# 创建数据库，中间可选，后面字符串编码设置可选
# 关键字：create，注意不要写成creat！

show create database schools;
# 查看该库是怎么创建的，以及创建用的字符编码
# 关键字：show

drop database (if exists) schools;
# 删除数据库，中间可选
# 关键字：drop

alter database schools charset=gbk;
# 修改字符编码
# 关键字
```

